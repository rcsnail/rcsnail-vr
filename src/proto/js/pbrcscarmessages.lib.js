/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.rcsCar.CarCommand');
goog.provide('proto.rcsCar.CarResponse');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rcsCar.CarCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rcsCar.CarCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rcsCar.CarCommand.displayName = 'proto.rcsCar.CarCommand';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rcsCar.CarCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.rcsCar.CarCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rcsCar.CarCommand} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rcsCar.CarCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    steering: msg.getSteering(),
    gear: msg.getGear(),
    throttle: msg.getThrottle(),
    braking: msg.getBraking(),
    messagetime: msg.getMessagetime(),
    lastrecvmessagetime: msg.getLastrecvmessagetime(),
    debugstr: msg.getDebugstr(),
    customstate: msg.getCustomstate_asB64(),
    packetno: msg.getPacketno()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rcsCar.CarCommand}
 */
proto.rcsCar.CarCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rcsCar.CarCommand;
  return proto.rcsCar.CarCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rcsCar.CarCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rcsCar.CarCommand}
 */
proto.rcsCar.CarCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSteering(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThrottle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBraking(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastrecvmessagetime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugstr(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCustomstate(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPacketno(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rcsCar.CarCommand} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rcsCar.CarCommand.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rcsCar.CarCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rcsCar.CarCommand.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSteering();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getGear();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getThrottle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getBraking();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = this.getMessagetime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = this.getLastrecvmessagetime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = this.getDebugstr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getCustomstate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = this.getPacketno();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rcsCar.CarCommand} The clone.
 */
proto.rcsCar.CarCommand.prototype.cloneMessage = function() {
  return /** @type {!proto.rcsCar.CarCommand} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float steering = 1;
 * @return {number}
 */
proto.rcsCar.CarCommand.prototype.getSteering = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rcsCar.CarCommand.prototype.setSteering = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 gear = 2;
 * @return {number}
 */
proto.rcsCar.CarCommand.prototype.getGear = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rcsCar.CarCommand.prototype.setGear = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float throttle = 3;
 * @return {number}
 */
proto.rcsCar.CarCommand.prototype.getThrottle = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rcsCar.CarCommand.prototype.setThrottle = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float braking = 4;
 * @return {number}
 */
proto.rcsCar.CarCommand.prototype.getBraking = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rcsCar.CarCommand.prototype.setBraking = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 messageTime = 5;
 * @return {number}
 */
proto.rcsCar.CarCommand.prototype.getMessagetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.rcsCar.CarCommand.prototype.setMessagetime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 lastRecvMessageTime = 6;
 * @return {number}
 */
proto.rcsCar.CarCommand.prototype.getLastrecvmessagetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.rcsCar.CarCommand.prototype.setLastrecvmessagetime = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string debugStr = 7;
 * @return {string}
 */
proto.rcsCar.CarCommand.prototype.getDebugstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.rcsCar.CarCommand.prototype.setDebugstr = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bytes customState = 8;
 * @return {!(string|Uint8Array)}
 */
proto.rcsCar.CarCommand.prototype.getCustomstate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/**
 * optional bytes customState = 8;
 * This is a type-conversion wrapper around `getCustomstate()`
 * @return {string}
 */
proto.rcsCar.CarCommand.prototype.getCustomstate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCustomstate()));
};


/**
 * optional bytes customState = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCustomstate()`
 * @return {!Uint8Array}
 */
proto.rcsCar.CarCommand.prototype.getCustomstate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCustomstate()));
};


/** @param {!(string|Uint8Array)} value  */
proto.rcsCar.CarCommand.prototype.setCustomstate = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 packetNo = 9;
 * @return {number}
 */
proto.rcsCar.CarCommand.prototype.getPacketno = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.rcsCar.CarCommand.prototype.setPacketno = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rcsCar.CarResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rcsCar.CarResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rcsCar.CarResponse.displayName = 'proto.rcsCar.CarResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rcsCar.CarResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rcsCar.CarResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rcsCar.CarResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.rcsCar.CarResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    steering: msg.getSteering(),
    gear: msg.getGear(),
    throttle: msg.getThrottle(),
    braking: msg.getBraking(),
    messagetime: msg.getMessagetime(),
    lastrecvmessagetime: msg.getLastrecvmessagetime(),
    batvoltageMv: msg.getBatvoltageMv(),
    steeringadc: msg.getSteeringadc(),
    cartimestamp: msg.getCartimestamp(),
    debugrespstr: msg.getDebugrespstr(),
    customresponse: msg.getCustomresponse_asB64(),
    responsedelay: msg.getResponsedelay(),
    lastrecvpacketno: msg.getLastrecvpacketno(),
    speed: msg.getSpeed()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rcsCar.CarResponse}
 */
proto.rcsCar.CarResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rcsCar.CarResponse;
  return proto.rcsCar.CarResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rcsCar.CarResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rcsCar.CarResponse}
 */
proto.rcsCar.CarResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSteering(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThrottle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBraking(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastrecvmessagetime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatvoltageMv(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSteeringadc(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCartimestamp(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugrespstr(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCustomresponse(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponsedelay(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastrecvpacketno(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.rcsCar.CarResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.rcsCar.CarResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rcsCar.CarResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.rcsCar.CarResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSteering();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getGear();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getThrottle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getBraking();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = this.getMessagetime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = this.getLastrecvmessagetime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = this.getBatvoltageMv();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getSteeringadc();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getCartimestamp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = this.getDebugrespstr();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getCustomresponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = this.getResponsedelay();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = this.getLastrecvpacketno();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = this.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.rcsCar.CarResponse} The clone.
 */
proto.rcsCar.CarResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.rcsCar.CarResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float steering = 1;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getSteering = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setSteering = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 gear = 2;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getGear = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setGear = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float throttle = 3;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getThrottle = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setThrottle = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float braking = 4;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getBraking = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setBraking = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 messageTime = 5;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getMessagetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setMessagetime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 lastRecvMessageTime = 6;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getLastrecvmessagetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setLastrecvmessagetime = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 batVoltage_mV = 7;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getBatvoltageMv = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setBatvoltageMv = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 steeringAdc = 8;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getSteeringadc = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setSteeringadc = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 carTimestamp = 9;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getCartimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setCartimestamp = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string debugRespStr = 10;
 * @return {string}
 */
proto.rcsCar.CarResponse.prototype.getDebugrespstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.rcsCar.CarResponse.prototype.setDebugrespstr = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes customResponse = 11;
 * @return {!(string|Uint8Array)}
 */
proto.rcsCar.CarResponse.prototype.getCustomresponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/**
 * optional bytes customResponse = 11;
 * This is a type-conversion wrapper around `getCustomresponse()`
 * @return {string}
 */
proto.rcsCar.CarResponse.prototype.getCustomresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCustomresponse()));
};


/**
 * optional bytes customResponse = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCustomresponse()`
 * @return {!Uint8Array}
 */
proto.rcsCar.CarResponse.prototype.getCustomresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCustomresponse()));
};


/** @param {!(string|Uint8Array)} value  */
proto.rcsCar.CarResponse.prototype.setCustomresponse = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 responseDelay = 12;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getResponsedelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setResponsedelay = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 lastRecvPacketNo = 13;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getLastrecvpacketno = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 13, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setLastrecvpacketno = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional float speed = 14;
 * @return {number}
 */
proto.rcsCar.CarResponse.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};


/** @param {number} value  */
proto.rcsCar.CarResponse.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 14, value);
};


